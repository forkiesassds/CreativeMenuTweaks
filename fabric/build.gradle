plugins {
    id "architectury-plugin" version "3.4.+"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: "dev.architectury.loom"

version = "${rootProject.mod_version}+${rootProject.minecraft_version}"
base {
    archivesName.set("${rootProject.archives_base_name}-fabric")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = file("src/main/resources/tweaked_creative_menu.accesswidener")
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")
    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
        exclude group: "net.fabricmc", module: "fabric-language-kotlin"
    }

    common(project(path: rootProject.path, configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: rootProject.path, configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version
    }

    from(rootProject.file("src/main/resources")) {
        include "**/**"
        exclude "tweaked_creative_menu-common.mixins.json"
    }
}

var outDir = rootProject.layout.buildDirectory.dir("libs/fabric")
shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
    destinationDirectory = outDir
}

remapSourcesJar {
    destinationDirectory = outDir
}

jar {
    archiveClassifier = "dev"
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = rootProject.modrinth_project_id
    versionName = "Tweaked Creative Menu " + project.version
    versionNumber = rootProject.version
    gameVersions = rootProject.supported_versions.split(",").toList()
    changelog = rootProject.file("CHANGELOG.md").text
    loaders = ["fabric", "quilt"]
    uploadFile = tasks.remapJar
    dependencies {
        required.project "fabric-api"
        optional.project "yacl"
    }
}